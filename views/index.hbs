<!--Sam Lindsey, August 26th 2020, Project for Iterative LLC -->



<!-- ALL OF THE CODE BELOW IS PRACTICE, ONLY LEFT IN TO SHOW THE WORK I DID!!!-->

<!--<!DOCTYPE html>-->
<!--<html>-->
<!--<head>-->
<!--    <style>-->
<!--        /* Set the size of the div element that contains the map */-->
<!--        #map {-->
<!--            height: 400px;  /* The height is 400 pixels */-->
<!--            width: 100%;  /* The width is the width of the web page */-->
<!--        }-->
<!--    </style>-->
<!--</head>-->
<!--<body>-->
<!--<h3>My Google Maps Demo</h3>-->

<!--<input id="pac-input" class="controls"type="text"-->
<!--       placeholder="Start typing here">-->
<!--<div id="map"></div>-->
<!--<script-->
<!-- src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA6pka5CajvSHDBrOPwKGKy7BwkuMltTPk&libraries=places">-->
<!--</script>-->

<!--<script defer-->
<!--        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA6pka5CajvSHDBrOPwKGKy7BwkuMltTPk&callback=initMap">-->
<!--</script>-->

<!--<script src="routes/index.js"></script>-->

<!--<br><br>-->

<!--<label for="fname">Starting Destination:</label>-->
<!--<input type="text" id="begin" name="begin"><br><br>-->
<!--<script >-->
<!--    var map;-->
<!--    function initialize(){-->
<!--        var mapOptions = {-->
<!--            zoom: 8,-->
<!--            center: new google.maps.LatLng(-34, 150)-->
<!--        };-->
<!--        map = new google.maps.Map(document.getElementById('map'),-->
<!--        mapOptions);-->
<!--    }-->

<!--    google.maps.event.addDomListener(window, 'load', initialize);-->

<!--    var defaultBounds= new google.maps.LatLngBounds(-->
<!--            new google.maps.LatLng(-33.8902,151.1759),-->
<!--            new google.maps.LatLng(-33.8474,151.2631));-->

<!--    var options = {-->
<!--        bounds:defaultBounds-->
<!--    };-->

<!--    var input = document.getElementById('pac-input');-->
<!--    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);-->

<!--    var autocomplete = new google.maps.places.Autocomplete(input, options);-->


<!--</script>-->

<!--<label for="lname">End Destination:</label>-->
<!--<input type="text" id="end" name="end"><br><br>-->

<!--</body>-->
<!--</html>-->

<!--&lt;!&ndash;DISTANCE EXAMPLE&ndash;&gt;-->
<!--<!DOCTYPE html>-->
<!--<html>-->
<!--<head>-->
<!--    <style>-->
<!--        /* Set the size of the div element that contains the map */-->
<!--        #map {-->
<!--            height: 400px;-->
<!--            width: 600px;-->
<!--        }-->
<!--    </style>-->
<!--</head>-->
<!--<body>-->
<!--&lt;!&ndash;The div elements for the map and message &ndash;&gt;-->
<!--<div id="map"></div>-->
<!--<div id="msg"></div>-->
<!--&lt;!&ndash;Load the API from the specified URL -- remember to replace YOUR_API_KEY&ndash;&gt;-->

<!--<script>-->
<!--    // Initialize and add the map-->
<!--    var map;-->

<!--    function haversine_distance(mk1, mk2) {-->
<!--        var R = 3958.8; // Radius of the Earth in miles-->
<!--        var rlat1 = mk1.position.lat() * (Math.PI/180); // Convert degrees to radians-->
<!--        var rlat2 = mk2.position.lat() * (Math.PI/180); // Convert degrees to radians-->
<!--        var difflat = rlat2-rlat1; // Radian difference (latitudes)-->
<!--        var difflon = (mk2.position.lng()-mk1.position.lng()) * (Math.PI/180); // Radian difference (longitudes)-->

<!--        var d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat/2)*Math.sin(difflat/2)+Math.cos(rlat1)*Math.cos(rlat2)*Math.sin(difflon/2)*Math.sin(difflon/2)));-->
<!--        return d;-->
<!--    }-->

<!--    function initMap() {-->
<!--        // The map, centered on Central Park-->
<!--        const center = {lat: 40.774102, lng: -73.971734};-->
<!--        const options = {zoom: 15, scaleControl: true, center: center};-->
<!--        map = new google.maps.Map(-->
<!--                document.getElementById('map'), options);-->
<!--        // Locations of landmarks-->
<!--        const dakota = {lat: 40.7767644, lng: -73.9761399};-->
<!--        const frick = {lat: 40.771209, lng: -73.9673991};-->

<!--        const begin = document.getElementById('end') = ;-->
<!--        const end = document.getElementById('begin') = ;-->
<!--        // The markers for The Dakota and The Frick Collection-->
<!--        var mk1 = new google.maps.Marker({position: dakota, map: map});-->
<!--        var mk2 = new google.maps.Marker({position: frick, map: map});-->
<!--        var line = new google.maps.Polyline({path: [dakota, frick], map: map});-->
<!--        // Calculate and display the distance between markers-->
<!--        var distance = haversine_distance(mk1, mk2);-->
<!--        document.getElementById('msg').innerHTML = "Distance between markers: " + distance.toFixed(2) + " mi.";-->
<!--    }-->

<!--</script>-->

<!--<script async defer-->
<!--        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBXFhd3yV0alvGwV7kVGeglAXtN9F_NZD0&callback=initMap">-->
<!--</script>-->

<!--<label for="end">End Destination:</label>-->
<!--<input type="text" id="end" name="end"><br><br>-->

<!--<label for="begin">Starting Destination:</label>-->
<!--<input type="text" id="begin" name="begin"><br><br>-->


<!--</body>-->
<!--</html>-->

<!--AutoCompleteExample-->
<!--<!DOCTYPE html>-->
<!--<html>-->
<!--<head>-->
<!--    <title>Place Autocomplete</title>-->
<!--    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>-->
<!--    <script-->
<!--            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBXFhd3yV0alvGwV7kVGeglAXtN9F_NZD0&callback=initMap&libraries=places&v=weekly"-->
<!--            defer-->
<!--    ></script>-->
<!--    <style type="text/css">-->
<!--        /* Always set the map height explicitly to define the size of the div-->
<!--         * element that contains the map. */-->
<!--        #map {-->
<!--            height: 50%;-->
<!--        }-->

<!--        /* Optional: Makes the sample page fill the window. */-->
<!--        html,-->
<!--        body {-->
<!--            height: 100%;-->
<!--            margin: 0;-->
<!--            padding: 0;-->
<!--        }-->

<!--        #description {-->
<!--            font-family: Roboto;-->
<!--            font-size: 15px;-->
<!--            font-weight: 300;-->
<!--        }-->

<!--        #infowindow-content .title {-->
<!--            font-weight: bold;-->
<!--        }-->

<!--        #infowindow-content {-->
<!--            display: none;-->
<!--        }-->

<!--        #map #infowindow-content {-->
<!--            display: inline;-->
<!--        }-->

<!--        .pac-card {-->
<!--            margin: 10px 10px 0 0;-->
<!--            border-radius: 2px 0 0 2px;-->
<!--            box-sizing: border-box;-->
<!--            -moz-box-sizing: border-box;-->
<!--            outline: none;-->
<!--            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);-->
<!--            background-color: #fff;-->
<!--            font-family: Roboto;-->
<!--        }-->

<!--        #pac-container {-->
<!--            padding-bottom: 12px;-->
<!--            margin-right: 12px;-->
<!--        }-->

<!--        .pac-controls {-->
<!--            display: inline-block;-->
<!--            padding: 5px 11px;-->
<!--        }-->

<!--        .pac-controls label {-->
<!--            font-family: Roboto;-->
<!--            font-size: 13px;-->
<!--            font-weight: 300;-->
<!--        }-->

<!--        #pac-input {-->
<!--            background-color: #fff;-->
<!--            font-family: Roboto;-->
<!--            font-size: 15px;-->
<!--            font-weight: 300;-->
<!--            margin-left: 12px;-->
<!--            padding: 0 11px 0 13px;-->
<!--            text-overflow: ellipsis;-->
<!--            width: 400px;-->
<!--        }-->

<!--        #pac-input:focus {-->
<!--            border-color: #4d90fe;-->
<!--        }-->

<!--        #title {-->
<!--            color: #fff;-->
<!--            background-color: #4d90fe;-->
<!--            font-size: 25px;-->
<!--            font-weight: 500;-->
<!--            padding: 6px 12px;-->
<!--        }-->
<!--    </style>-->
<!--    <script>-->
<!--        "use strict";-->

<!--        // This example requires the Places library. Include the libraries=places-->
<!--        // parameter when you first load the API. For example:-->
<!--        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">-->
<!--        function initMap() {-->
<!--            const map = new google.maps.Map(document.getElementById("map"), {-->
<!--                center: {-->
<!--                    lat: -33.8688,-->
<!--                    lng: 151.2195-->
<!--                },-->
<!--                zoom: 13-->
<!--            });-->
<!--            const card = document.getElementById("pac-card");-->
<!--            const input = document.getElementById("pac-input");-->
<!--            map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);-->
<!--            const autocomplete = new google.maps.places.Autocomplete(input); // Bind the map's bounds (viewport) property to the autocomplete object,-->
<!--            // so that the autocomplete requests use the current map bounds for the-->
<!--            // bounds option in the request.-->

<!--            autocomplete.bindTo("bounds", map); // Set the data fields to return when the user selects a place.-->

<!--            autocomplete.setFields([-->
<!--                "address_components",-->
<!--                "geometry",-->
<!--                "icon",-->
<!--                "name"-->
<!--            ]);-->
<!--            const infowindow = new google.maps.InfoWindow();-->
<!--            const infowindowContent = document.getElementById("infowindow-content");-->
<!--            infowindow.setContent(infowindowContent);-->
<!--            const marker = new google.maps.Marker({-->
<!--                map,-->
<!--                anchorPoint: new google.maps.Point(0, -29)-->
<!--            });-->
<!--            autocomplete.addListener("place_changed", () => {-->
<!--                infowindow.close();-->
<!--                marker.setVisible(false);-->
<!--                const place = autocomplete.getPlace();-->

<!--                if (!place.geometry) {-->
<!--                    // User entered the name of a Place that was not suggested and-->
<!--                    // pressed the Enter key, or the Place Details request failed.-->
<!--                    window.alert(-->
<!--                            "No details available for input: '" + place.name + "'"-->
<!--                    );-->
<!--                    return;-->
<!--                } // If the place has a geometry, then present it on a map.-->

<!--                if (place.geometry.viewport) {-->
<!--                    map.fitBounds(place.geometry.viewport);-->
<!--                } else {-->
<!--                    map.setCenter(place.geometry.location);-->
<!--                    map.setZoom(17); // Why 17? Because it looks good.-->
<!--                }-->

<!--                marker.setPosition(place.geometry.location);-->
<!--                marker.setVisible(true);-->
<!--                let address = "";-->

<!--                if (place.address_components) {-->
<!--                    address = [-->
<!--                        (place.address_components[0] &&-->
<!--                                place.address_components[0].short_name) ||-->
<!--                        "",-->
<!--                        (place.address_components[1] &&-->
<!--                                place.address_components[1].short_name) ||-->
<!--                        "",-->
<!--                        (place.address_components[2] &&-->
<!--                                place.address_components[2].short_name) ||-->
<!--                        ""-->
<!--                    ].join(" ");-->
<!--                }-->

<!--                infowindowContent.children["place-icon"].src = place.icon;-->
<!--                infowindowContent.children["place-name"].textContent = place.name;-->
<!--                infowindowContent.children["place-address"].textContent = address;-->
<!--                infowindow.open(map, marker);-->
<!--            }); // Sets a listener on a radio button to change the filter type on Places-->
<!--            // Autocomplete.-->

<!--            function setupClickListener(id, types) {-->
<!--                const radioButton = document.getElementById(id);-->
<!--                radioButton.addEventListener("click", () => {-->
<!--                    autocomplete.setTypes(types);-->
<!--                });-->
<!--            }-->

<!--            setupClickListener("changetype-all", []);-->
<!--            setupClickListener("changetype-address", ["address"]);-->
<!--            setupClickListener("changetype-establishment", ["establishment"]);-->
<!--            setupClickListener("changetype-geocode", ["geocode"]);-->
<!--            document-->
<!--                    .getElementById("use-strict-bounds")-->
<!--                    .addEventListener("click", function() {-->
<!--                        console.log("Checkbox clicked! New state=" + this.checked);-->
<!--                        autocomplete.setOptions({-->
<!--                            strictBounds: this.checked-->
<!--                        });-->
<!--                    });-->
<!--        }-->
<!--    </script>-->
<!--</head>-->
<!--<body>-->
<!--<div class="pac-card" id="pac-card">-->
<!--    <div>-->
<!--        <div id="title">-->
<!--            Autocomplete search-->
<!--        </div>-->
<!--        <div id="type-selector" class="pac-controls">-->
<!--            <input-->
<!--                    type="radio"-->
<!--                    name="type"-->
<!--                    id="changetype-all"-->
<!--                    checked="checked"-->
<!--            />-->
<!--            <label for="changetype-all">All</label>-->

<!--            <input type="radio" name="type" id="changetype-establishment" />-->
<!--            <label for="changetype-establishment">Establishments</label>-->

<!--            <input type="radio" name="type" id="changetype-address" />-->
<!--            <label for="changetype-address">Addresses</label>-->

<!--            <input type="radio" name="type" id="changetype-geocode" />-->
<!--            <label for="changetype-geocode">Geocodes</label>-->
<!--        </div>-->
<!--        <div id="strict-bounds-selector" class="pac-controls">-->
<!--            <input type="checkbox" id="use-strict-bounds" value="" />-->
<!--            <label for="use-strict-bounds">Strict Bounds</label>-->
<!--        </div>-->
<!--    </div>-->
<!--    <div id="pac-container">-->
<!--        <input id="pac-input" type="text" placeholder="Enter a location" />-->
<!--    </div>-->
<!--</div>-->
<!--<div id="map"></div>-->
<!--<div id="infowindow-content">-->
<!--    <img src="" width="16" height="16" id="place-icon" />-->
<!--    <span id="place-name" class="title"></span><br />-->
<!--    <span id="place-address"></span>-->
<!--</div>-->
<!--</body>-->
<!--</html>-->

<!--Current code begins-->
<!DOCTYPE html>
<html>

<!--CSS STYLING CODE-->
<head>
    <title>Distance Matrix Service</title>
    <style>
        table, tr, th, td {
            border: 1px solid black;
            padding: 10px;
            text-align: left;
        }

        th {
            height: 20px;
            width: 40px;
        }

        #right-panel {
            font-family: 'Roboto', 'sans-serif';
            line-height: 30px;
            padding-left: 10px;
        }

        #right-panel select, #right-panel input {
            font-size: 15px;
        }

        #right-panel select {
            width: 100%;
        }

        #right-panel i {
            font-size: 12px;
        }

        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #map {
            height: 100%;
            width: 50%;
        }

        #right-panel {
            float: right;
            width: 48%;
            padding-left: 2%;
        }

        #output {
            font-size: 11px;
        }
    </style>
</head>
<body>
<div id="right-panel">
    <div id="inputs">

        <!--The user will input their starting location here-->
        <label for="begin">Starting Origin (Must be selected via Autocomplete):</label>
        <input type="text" id="begin" name="begin"><br><br>

        <!--The user will input their ending location here-->
        <label for="end">End Destination (Must be selected via Autocomplete):</label>
        <input type="text" id="end" name="end"><br><br>
<!--        <a href="/insert">-->

            <!--This button click will trigger the calcDist function described in more detail below.
            It will utilize the user inputs above.-->
            <button onclick="calcDist(document.getElementById('begin').value,document.getElementById('end').value)">
                Calculate distance and travel time!
            </button>

<!--        </a>-->
    </div>
    <div>
        <!-- This will display the results of the calculation above-->
        <strong>Results</strong>
        <div id="output"></div>
        <br><br>

        <!-- Create and populate the table with data from mongoDB-->
        <a href="/get-data">
            <button> Load all previous searches!</button>
        </a>
        <table id="locationTable">
            <thead>
            <tr>
                <th>Origin</th>
                <th>Destination</th>
                <th>Distance</th>
                <th>Travel Time</th>
            </tr>
            </thead>
            <tbody>
            {{# each items}}
                <article class="item">
                    <tr>
                        <td> {{this.originList}} </td>
                        <td> {{this.destination}} </td>
                        <td> {{this.distance}} </td>
                        <td> {{this.duration}} </td>

                    </tr>
                </article>
            {{/each}}
            </tbody>
        </table>
    </div>
</div>

<div id="map"></div>

<script>

    //This function intializes the map and autocomplete input sections and sets the location of the map
    //to Albuquerque, NM (Specifically the Iterative, LLC offices)
    function initMap() {

        const origin = document.getElementById("begin");
        const autocompleteOrg = new google.maps.places.Autocomplete(origin);

        const destination = document.getElementById("end");
        const autcompleteDest = new google.maps.places.Autocomplete(destination);

        var map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 35.093301, lng: -106.568415},
            zoom: 10
        });

    }

    //This function uses the Matrix API to calculate the distance and duration of the journey
    function calcDist(origin, destination) {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: {origin},
            zoom: 10
        });

        var bounds = new google.maps.LatLngBounds;

        var markersArray = [];
        var geocoder = new google.maps.Geocoder;

        var destinationIcon = 'https://chart.googleapis.com/chart?' +
                'chst=d_map_pin_letter&chld=D|FF0000|000000';
        var originIcon = 'https://chart.googleapis.com/chart?' +
                'chst=d_map_pin_letter&chld=O|FFFF00|000000';

        console.log(origin);
        console.log(destination);

        var service = new google.maps.DistanceMatrixService;
        //Origins and Destinations are the only two "required" parameters, the rest are optional
        //and can be changed--> See the Distance Matrix documentation
        service.getDistanceMatrix({
            origins: [origin],
            destinations: [destination],
            travelMode: 'DRIVING',
            unitSystem: google.maps.UnitSystem.METRIC,
            avoidHighways: false,
            avoidTolls: false
        }, function (response, status) {
            if (status !== 'OK') {
                alert('Error was: ' + status);
            } else {
                var originList = response.originAddresses;
                var destinationList = response.destinationAddresses;
                var outputDiv = document.getElementById('output');
                outputDiv.innerHTML = '';
                deleteMarkers(markersArray);

                //This will show us the Origin (O) and Destination (D) after
                //the have been input and distance and duration have been calculated
                var showGeocodedAddressOnMap = function (asDestination) {
                    var icon = asDestination ? destinationIcon : originIcon;
                    return function (results, status) {
                        if (status === 'OK') {
                            map.fitBounds(bounds.extend(results[0].geometry.location));
                            markersArray.push(new google.maps.Marker({
                                map: map,
                                position: results[0].geometry.location,
                                icon: icon
                            }));
                        } else {
                            alert('Geocode was not successful due to: ' + status);
                        }
                    };
                };

                for (var i = 0; i < originList.length; i++) {
                    var results = response.rows[i].elements;
                    geocoder.geocode({'address': originList[i]},
                            showGeocodedAddressOnMap(false));
                    for (var j = 0; j < results.length; j++) {
                        geocoder.geocode({'address': destinationList[j]},
                                showGeocodedAddressOnMap(true));

                        //Console logs to ensure elements are being kept track of correctly
                        console.log(originList);
                        console.log(destinationList);
                        console.log(results[j].distance.text);
                        console.log(results[j].duration.text);

                        var origin = originList[i];
                        var destination = destinationList[j];
                        var distance = results[j].distance.text;
                        var duration = results[j].duration.text;

                        outputDiv.innerHTML += origin + ' to ' + destination +
                                ': ' + distance + ' in ' +
                                duration + '<br>';
                    }
                }
            }
        });

    }

    //Delete the markers so the map can be reset correctly
    function deleteMarkers(markersArray) {
        for (var i = 0; i < markersArray.length; i++) {
            markersArray[i].setMap(null);
        }
        markersArray = [];
    }
</script>

<!--Load the maps and required API-->
<script defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA6pka5CajvSHDBrOPwKGKy7BwkuMltTPk&callback=initMap&libraries=places&v=weekly">
</script>

</body>
</html>